version: '2'

networks:
  finalexam:

services:
# first we pass all the parameters of the orderer.
  orderer.finalexam.com:
    image: hyperledger/fabric-orderer:x86_64-1.1.0
    container_name: orderer.finalexam.com
    environment:
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
# this is the genesis block generated by configtxgen. 
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
# MSP Identifier.
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
# Folder with the crtpto material
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
    volumes:
# We need to mount the folders with the crypto material and the block and channel artifacts.
      - ./orderer/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/finalexam.com/orderers/orderer.finalexam.com/msp:/var/hyperledger/orderer/msp
    command: orderer
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    ports:
# We need to make sure that the containers have different ports.
      - 7050:7050
    networks:
      - finalexam

# the following four containers are the peer containers, the first two belong to Org1: peer0.Org1.com and 
# peer1.Org1.com. The settings are similar for all the peers so I will write comments on this one.
  peer0.Org1.com:
    container_name: peer0.Org1.com
    extends:
# the basic paramets are set up in file peer.yaml
      file: ./peer.yaml
      service: peer
    environment:
      - CORE_PEER_ID=peer0.Org1.com
      - CORE_PEER_ADDRESS=peer0.Org1.com:7051
# MSP ID
      - CORE_PEER_LOCALMSPID=Org1MSP
# crypto material generated by cryptogen
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Org1.com:7051
    volumes:
# we mount the folder with the crypto material
      - ./crypto-config/peerOrganizations/Org1.com/peers/peer0.Org1.com/msp:/etc/hyperledger/msp/peer
    ports:
# different ports than the orderer and the rest of the containers.
      - 7051:7051
      - 7053:7053
# we want to enforce that this container will not start until the orderer has loaded first.
    depends_on:
      - orderer.finalexam.com
    networks:
      - finalexam

  peer1.Org1.com:
    container_name: peer1.Org1.com
    extends:
      file: ./peer.yaml
      service: peer
    environment:
      - CORE_PEER_ID=peer1.Org1.com
      - CORE_PEER_ADDRESS=peer1.Org1.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.Org1.com:7051
    volumes:
      - ./crypto-config/peerOrganizations/Org1.com/peers/peer1.Org1.com/msp:/etc/hyperledger/msp/peer
    ports:
      - 7052:7052
      - 7054:7054
    depends_on:
      - orderer.finalexam.com
    networks:
      - finalexam

  peer0.Org2.com:
    container_name: peer0.Org2.com
    extends:
      file: ./peer.yaml
      service: peer
    environment:
      - CORE_PEER_ID=peer0.Org2.com
      - CORE_PEER_ADDRESS=peer0.Org2.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Org2.com:7051
    volumes:
      - ./crypto-config/peerOrganizations/Org2.com/peers/peer0.Org2.com/msp:/etc/hyperledger/msp/peer
    ports:
      - 8051:7051
      - 8053:7053
    depends_on:
      - orderer.finalexam.com
    networks:
      - finalexam

  peer1.Org2.com:
    container_name: peer1.Org2.com
    extends:
      file: ./peer.yaml
      service: peer
    environment:
      - CORE_PEER_ID=peer1.Org2.com
      - CORE_PEER_ADDRESS=peer1.Org2.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.Org2.com:7051
    volumes:
      - ./crypto-config/peerOrganizations/Org2.com/peers/peer1.Org2.com/msp:/etc/hyperledger/msp/peer
    ports:
      - 8052:7052
      - 8054:7054
    depends_on:
      - orderer.finalexam.com
    networks:
      - finalexam

# finally , we have two two Client containers, one for each Org.  
  cli.Org1:
    extends:
# basic parameter appear in file cli.yaml
      file: ./cli.yaml
      service: cli
    container_name: cli.Org1
    environment:
      - CORE_PEER_ID=cli.Org1.com
# we link the Client container with the peer0 of Org1.
      - CORE_PEER_ADDRESS=peer0.Org1.com:7051
# MSP ID
      - CORE_PEER_LOCALMSPID=Org1MSP
# crypto material for user Admin.
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Org1.com/msp
    volumes:
# we mount the folder with the crypto materials
      - ./crypto-config/peerOrganizations/Org1.com:/etc/hyperledger/msp
    depends_on:
# client container will not start until Order and Peer0 have started.
      - orderer.finalexam.com
      - peer0.Org1.com
    networks:
      - finalexam

  cli.Org2:
    extends:
      file: ./cli.yaml
      service: cli
    container_name: cli.Org2
    environment:
      - CORE_PEER_ID=cli.Org2.com
      - CORE_PEER_ADDRESS=peer0.Org2.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Org2.com/msp
    volumes:
      - ./crypto-config/peerOrganizations/Org2.com:/etc/hyperledger/msp
    depends_on:
      - orderer.finalexam.com
      - peer0.Org2.com
    networks:
      - finalexam
